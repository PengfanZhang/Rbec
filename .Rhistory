library(devtools)
load_all()
?Rbec
fastq <- system.file("extdata", "test_raw_merged_reads.fastq.gz", package = "Rbec")
ref <- system.file("extdata", "test_ref.fasta", package = "Rbec")
ref <- read_lines(ref)
ref_name <- data.frame(name=ref[which(seq_along(ref)%%2==1)], seq=toupper(ref[which(seq_along(ref)%%2==0)]), stringsAsFactors=FALSE)
ref_name$name <- sub(">", "", ref_name$name)
ref <- data.frame(ref_seq=toupper(ref[which(seq_along(ref)%%2==0)]), stringsAsFactors=FALSE)
# calculate the error matrix
error_ref_matrix <- error_m(fastq, ref, sampling_size, threads, ascii, ref_seeker)
sampling_size <- 500
threads <- 1
ascii <- 33
ref_seeker <- 1
# calculate the error matrix
error_ref_matrix <- error_m(fastq, ref, sampling_size, threads, ascii, ref_seeker)
error_matrix <- error_ref_matrix[["err"]]
ref <- error_ref_matrix[["ref"]]
derep <- error_ref_matrix[["derep"]]
# calculate abundance probabilities
lambda_out <- abd_prob(derep, ref, error_matrix)
min_E <- 0.05
min_P <- 1e-40
final_list <- consis_err(fastq, derep, ref, lambda_out, sampling_size, ascii, min_E, min_P)
straintab <- final_list[["table"]]
straintab[, 1] <- ref_name$name[match(straintab[, 1], ref_name[, 2])]
lambda_out <- final_list[["lambda_out"]]
lambda_out[, 2] <- ref_name$name[match(lambda_out[, 2], ref_name[, 2])]
# identify potential contaminants from reads which cannot be corrected and have high abundance (larger than min_cont_abd)
contamination <- which(final_list$lambda_out$Corrected=="No" &
(final_list$lambda_out$Obs_abd >= min_cont_obs_abd | final_list$lambda_out$Obs_abd/error_ref_matrix$total_reads>=min_cont_abd))
#output paralogue sequences for each strain
paralog_out <- data.frame(stringsAsFactors=FALSE)
c <- 1
cn_internal_inference <- c()
for (i in seq(nrow(lambda_out))){
if (lambda_out$Lambda[i]!=1 & lambda_out$E[i]>=min_E & lambda_out$Corrected[i]=="Yes" & lambda_out$Obs_abd[i]/max(lambda_out$Obs_abd[which(lambda_out$Ref_ID==lambda_out$Ref_ID[i])])>=1/15){
paralog_rec <- paste(paste(">", "Seq_", c, sep=""), paste("Paralogue", lambda_out$Ref_ID[i], sep = "="), sep = ";")
paralog_out <- rbind(paralog_out, paralog_rec, stringsAsFactors=FALSE)
paralog_out <- rbind(paralog_out, names(derep$uniques[i]), stringsAsFactors=FALSE)
cn_internal_inference <- c(cn_internal_inference, lambda_out$Ref_ID[i])
c <- c+1
}
}
paralog_out
cn_internal_inference
as.data.frame(table(cn_internal_inference))
cp_n <- as.data.frame(table(cn_internal_inference))
cp_n$Freq <- cp_n$Freq + 1
cp_n
straintab_norm$Corrected_Abundance <- round(straintab_norm$Corrected_Abundance/cp_n[match(straintab_norm$Ref_seq, cp_n[, 1]), 2])
straintab_norm <- straintab
straintab_norm$Corrected_Abundance <- round(straintab_norm$Corrected_Abundance/cp_n[match(straintab_norm$Ref_seq, cp_n[, 1]), 2])
straintab_norm
straintab
Rbec(fastq=fastq, reference=ref, outdir=tempdir(), threads=1, sampling_size=500, ascii=33)
tempdir()
fastq
ref
ref <- system.file("extdata", "test_ref.fasta", package = "Rbec")
Rbec(fastq=fastq, reference=ref, outdir=tempdir(), threads=1, sampling_size=500, ascii=33)
load_all()
Rbec(fastq=fastq, reference=ref, outdir=tempdir(), threads=1, sampling_size=500, ascii=33)
